# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EMdLl6_phjhgTEfCvY92f6NHnPoCqu9Q
"""

import streamlit as st
import requests
from requests.exceptions import ConnectionError

ip_api = "127.0.0.1"
port_api = "5000"

# Заголовок приложения
st.title("Insurance Prediction")

# Ввод данных
st.write("Enter details:")

# Выпадающее меню для выбора Gender
Gender = st.selectbox("Gender", ['Female', 'Male'])

# Текстовое поле для ввода возраста с проверкой на число
Age = st.text_input("Age", value=3)
if not Age.isdigit():
    st.error("Please enter a valid number for Age.")

# Выпадающее меню для выбора Previously_Insured
Previously_Insured = st.selectbox("Previously_Insured", [0, 1])

# Выпадающее меню для выбора Vehicle_Age
Vehicle_Age = st.selectbox("Vehicle_Age", ['< 1 Year', '1-2 Year', '> 2 Years'])

# Выпадающее меню для выбора Vehicle_Damage
Vehicle_Damage = st.selectbox("Vehicle_Damage", ['Yes', 'No'])

# Текстовое поле для ввода Annual_Premium с проверкой на число
Annual_Premium = st.text_input("Annual_Premium", value=1000)
if not Annual_Premium.isdigit():
    st.error("Please enter a valid number for Annual_Premium.")

# ------------------------------------------------------------------

# Кнопка для отправки запроса
if st.button("Predict"):
    # Проверка, что все поля заполнены
    if Age.isdigit() and Annual_Premium.isdigit():
        # Подготовка данных для отправки
        data = {
            "Gender": str(Gender),
            "Age": int(Age),
            "Previously_Insured": int(Previously_Insured),
            "Vehicle_Age": str(Vehicle_Age),
            "Vehicle_Damage": str(Vehicle_Damage),
            "Annual_Premium": float(Annual_Premium),
        }

        try:
            # Отправка запроса к Flask API
            response = requests.post(f"http://{ip_api}:{port_api}/predict_model", json=data)

            
            # Проверка статуса ответа
            if response.status_code == 200:
                prediction = response.json()["prediction"]
                st.success(f"Prediction: {prediction}")
            else:
                st.error(f"Request failed with status code {response.status_code}")

        except ConnectionError as e:
            st.error(f"Failed to connect to the server")
    else:
        st.error("Please fill in all fields with valid numbers.")